name: Mobile App CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2


      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'  # Set your Node.js version

      - name: Install dependencies
        run: npm install

      - name: Run static analysis (Linting)
        run: npm run lint
      - name: Install Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash
      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli --upgrade --user

      # Set up AWS credentials from GitHub secrets
      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id AKIAIOSFODNN7EXAMPLE
          aws configure set aws_secret_access_key wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
          aws configure set region us-west-2
          aws configure set output json


      - name: Run code formatting
        run: npm run format  # Prettier for code formatting
# Step 9: Grant execute permissions for gradlew
      - name: Grant execute permissions for gradlew
        run: chmod +x gradlew # Make gradlew executable (assuming it's in the android directory)

      # Step 10: Build Android APK
      - name: Build Android APK
        run: |
          cd android  # Change to the android directory
          ./gradlew assembleRelease  # Build the release APK

      - name: Build iOS IPA
        run: xcodebuild -scheme "MyApp" -configuration Release  # For iOS app

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test -- --coverage  # Enforce minimum 80% code coverage

      - name: Run UI tests (Detox for React Native)
        run: detox test  # For React Native apps using Detox

      - name: Upload Code Coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}  # Token for uploading coverage

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to Firebase Hosting
        run: firebase deploy --only hosting

      - name: Deploy to AWS (Simulated)
        run: aws s3 cp ./build/app-release.apk s3://my-bucket/my-app.apk

      - name: Deploy to GCP (Simulated)
        run: gsutil cp ./build/app-release.apk gs://my-bucket/my-app.apk

  observability:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Set up Prometheus
        run: docker-compose -f docker-compose-prometheus.yml up -d

      - name: Set up Grafana
        run: docker-compose -f docker-compose-grafana.yml up -d

      - name: Push Metrics to Prometheus
        run: curl -X POST -d "metrics data" http://localhost:9090/metrics

      - name: Monitor Deployment Status in Grafana
        run: curl -X GET http://localhost:3000/monitoring

  rollback:
    runs-on: ubuntu-latest
    needs: deploy
    if: failure()  # Only trigger on failure
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Rollback Firebase Hosting
        if: failure()
        run: |
          firebase hosting:rollback


      - name: Rollback AWS Deployment
        run: |
          aws s3 cp s3://my-bucket/my-app-v1.apk ./  # Rollback to previous version
          aws s3 cp ./my-app-v1.apk s3://my-bucket/my-app.apk

      - name: Rollback GCP Deployment
        run: |
          gsutil cp gs://my-bucket/my-app-v1.apk ./  # Rollback to previous version
          gsutil cp ./my-app-v1.apk gs://my-bucket/my-app.apk
